!function(){"use strict";function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=function(){function n(t,r){var o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this._settings=t,this._formElement=r,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._inputList=function(t){if(Array.isArray(t))return e(t)}(o=r.querySelectorAll(t.inputSelector))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._buttonEl=r.querySelector(t.submitButtonSelector)}var r,o;return r=n,(o=[{key:"_showInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"toggleButtonState",value:function(){this._inputList.every((function(e){return e.validity.valid}))?(this._buttonEl.classList.remove(this._inactiveButtonClass),this._buttonEl.disabled=!1):(this._buttonEl.classList.add(this._inactiveButtonClass),this._buttonEl.disabled=!0)}},{key:"_setupEventListeners",value:function(){var e=this;this.toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(n){e._checkInputValidity(t),e.toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setupEventListeners()}},{key:"resetValidation",value:function(){var e=this;this.toggleButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&t(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),n}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n){var r=t.data,o=t.handleCardClick,i=t.handleDeleteButton;t.handleLikeButton,function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=r,this._cardSelector=n,this._handleCardClick=o,this._handleDeleteButton=i}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){var e=document.querySelector(this._cardSelector).content.cloneNode(!0);return this._deleteButton=e.querySelector("card__delete-button"),e}},{key:"getView",value:function(){return this._element=this._getTemplate(),this._imageElement=this._element.querySelector(".card__image"),this._element.querySelector(".card__title").textContent=this._title,this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._imageElement.src=this._image,this._imageElement.alt="Photo of ".concat(this._title),this._setupEventListeners(),this._element}},{key:"_setupEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){return e._handleLikeButton()})),this._deleteButton.addEventListener("click",(function(){return e._handleDeleteButton()})),this._imageElement.addEventListener("click",(function(){return e._handleCardClick({title:e._title,image:e._image})}))}},{key:"_handleLikeButton",value:function(){var e=this;this._data.likes.some((function(t){return t._id===e._currentUserId}))?this._removeLike():this._addLike()}},{key:"_updateLikeCounter",value:function(){this._liked=this._element.querySelector(".like-button__counter"),this._liked.textContent=this._liked.length}},{key:"_handleDeleteButton",value:function(){this._deleteSubmitHandler(this._cardId,this._element)}},{key:"_addLike",value:function(){var e=this;this._api.addLike(this._cardId).then((function(t){e._likeButton.classList.add("card__btn-like_active"),e._likeCounter.textContent=t.likes.length,e._data=t})).catch((function(e){console.log(e)}))}},{key:"_removeLike",value:function(){var e=this;this._api.removeLike(this._cardId).then((function(t){e._likeButton.classList.remove("card__btn-like_active"),e._likeCounter.textContent=t.likes.length,e._data=t})).catch((function(e){console.log(e)}))}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"_handleEscUp",(function(e){"Escape"===e.key&&n.close()})),c(this,"_mouseClick",(function(e){e.target===n._popupElement&&n.close()})),this._popupElement=document.querySelector(t),this._handleEscUp=this._handleEscUp.bind(this)}var t,n;return t=e,(n=[{key:"setEventListeners",value:function(){var e=this;this._popupElement.querySelector(".popup__close-button").addEventListener("click",(function(){e.close()}))}},{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscUp),document.addEventListener("mousedown",this._mouseClick)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscUp),document.removeEventListener("mousedown",this._mouseClick)}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=d(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},f.apply(this,arguments)}function d(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function _(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return _(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._previewImage=t._popupElement.querySelector(".popup__image"),t._previewImageTitle=t._popupElement.querySelector(".popup__caption"),t}return t=a,(n=[{key:"open",value:function(e){this._previewImage.src=e.image,this._previewImage.alt="Photo of ".concat(e.title),this._previewImageTitle.textContent=e.title,f(y(a.prototype),"open",this).call(this)}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},k.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function w(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return w(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._form=t._popupElement.querySelector(".popup__form"),t._inputList=t._popupElement.querySelectorAll(".popup__input"),t._submitButton=t._popupElement.querySelector(".popup__save-button"),t._handleFormSubmit=r,t}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;k(E(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){k(E(a.prototype),"close",this).call(this),this._form.reset()}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var j=function(){function e(t){var n=this,r=t.nameSelector,o=t.descriptionSelector,i=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),O(this,"getUserInfo",(function(){return{name:n._name.textContent,description:n._description.textContent,avatar:n._avatar.src}})),O(this,"setUserInfo",(function(e){var t=e.name,r=e.description;n._name.textContent=t,n._description.textContent=r})),this._name=document.querySelector(r),this._description=document.querySelector(o),this._avatar=document.querySelector(i)}var t,n;return t=e,(n=[{key:"getUserId",value:function(){return this._id}},{key:"setAvatar",value:function(e){var t=e.userAvatar;t&&(this._avatar.src=t)}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),I={inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_type_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},P=(document.querySelector(".popup_type_add"),{editModal:".popup_type_edit",nameSelector:".profile__name",descriptionSelector:".profile__description",editButton:document.querySelector(".profile__edit-button"),closeButton:document.querySelector(".popup__close-button")}),B={selector:".popup_type_avatar",avatarSelector:".profile__image",button:document.querySelector(".avatar__edit-button"),form:document.querySelector(".popup_type_avatar"),avatarInput:document.querySelector("#avatar-input")},q={addModal:".popup_type_add",addButton:document.querySelector(".profile__add-button"),closeButton:document.querySelector(".popup__close-button")};function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var R=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Error ".concat(e.status))}},{key:"getAppInfo",value:function(){return Promise.all([this.getCardList(),this.getUserInfo()])}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:n})}).then(this._checkResponse)}},{key:"setUserAvatar",value:function(e){var t=e.avatar;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._checkResponse)}},{key:"addCard",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:n})}).then(this._checkResponse)}},{key:"removeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}},{key:"addLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"removeLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),T=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=document.querySelector(e).querySelector(".popup__save-button");n.textContent=t?"Saving...":"Save"};function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var x=new j({nameSelector:P.nameSelector,descriptionSelector:P.descriptionSelector,avatarSelector:B.avatarSelector}),D=new v(".popup_type_preview");D.setEventListeners();var V=new R({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"acca9dd3-a6a4-4626-88e2-60619602bdf9","Content-Type":"application/json"}});Promise.all([V.getUserInfo(),V.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];x.name,x.about,V.setUserInfo({name:o.name,about:o.about}),F.renderItems(i)})).catch((function(e){return console.warn("${err}")}));var M=function(e){return new o({data:e,handleCardClick:function(){D.open(e)},handleDeleteButton:function(t){removeCardPopup.open(t,e._id)},handleLikeButton:function(t){return t?V.addLike(e._id):V.removeLike(e._id)},userId:x.getUserId()},"#cardTemplate")},F=new a({renderer:function(e){var t=M(e).getView();F.addItem(t)}},"#placesList"),N=new C({popupSelector:P.editModal,handleFormSubmit:function(e){T(P.editModal,!0),V.setUserInfo({name:e.name,about:e.description}).then((function(e){x.setUserInfo({name:e.name,description:e.about}),N.close()})).catch((function(e){return console.warn("Unable to update profile information: ".concat(e))})).finally((function(){T(P.editModal)}))}}),H=new C({popupSelector:B.selector,handleFormSubmit:function(e){T(B.selector,!0),V.setUserAvatar({avatar:e.avatar}).then((function(e){x.setAvatar({userAvatar:e.avatar}),H.close()})).catch((function(e){return console.warn("Unable change the user avatar: ".concat(e))})).finally((function(){T(B.selector)}))}}),J=new C({popupSelector:q.addModal,handleFormSubmit:function(e){T(q.addModal,!0),V.addCard(e).then((function(e){var t=M(e);F.addItem(t.getView()),console.log(t),J.close()})).catch((function(e){return console.warn("Unable to add a card: ".concat(e))})).finally((function(){T(q.addModal)}))}}),$=document.querySelector("#owner-name"),z=document.querySelector("#owner-description");N.setEventListeners(),H.setEventListeners(),J.setEventListeners(),P.editButton.addEventListener("click",(function(){var e=x.getUserInfo();$.value=e.name,z.value=e.description,N.open(e)})),B.button.addEventListener("click",(function(){H.open()})),q.addButton.addEventListener("click",(function(){J.open()}));var G=document.querySelector(".popup_type_edit"),K=document.querySelector(".popup_type_avatar"),Q=document.querySelector(".popup_type_add");new n(I,G).enableValidation(),new n(I,K).enableValidation(),new n(I,Q).enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,